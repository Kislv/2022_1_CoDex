// Code generated by MockGen. DO NOT EDIT.
// Source: codex/internal/pkg/domain (interfaces: UserUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	domain "codex/internal/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// CheckAuth mocks base method.
func (m *MockUserUsecase) CheckAuth(arg0 uint64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAuth", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAuth indicates an expected call of CheckAuth.
func (mr *MockUserUsecaseMockRecorder) CheckAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAuth", reflect.TypeOf((*MockUserUsecase)(nil).CheckAuth), arg0)
}

// GetBasicInfo mocks base method.
func (m *MockUserUsecase) GetBasicInfo(arg0 uint64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasicInfo", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasicInfo indicates an expected call of GetBasicInfo.
func (mr *MockUserUsecaseMockRecorder) GetBasicInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasicInfo", reflect.TypeOf((*MockUserUsecase)(nil).GetBasicInfo), arg0)
}

// GetBookmarks mocks base method.
func (m *MockUserUsecase) GetBookmarks(arg0 uint64) ([]domain.Bookmark, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookmarks", arg0)
	ret0, _ := ret[0].([]domain.Bookmark)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookmarks indicates an expected call of GetBookmarks.
func (mr *MockUserUsecaseMockRecorder) GetBookmarks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookmarks", reflect.TypeOf((*MockUserUsecase)(nil).GetBookmarks), arg0)
}

// GetUserReviews mocks base method.
func (m *MockUserUsecase) GetUserReviews(arg0 uint64) ([]domain.UserReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReviews", arg0)
	ret0, _ := ret[0].([]domain.UserReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReviews indicates an expected call of GetUserReviews.
func (mr *MockUserUsecaseMockRecorder) GetUserReviews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReviews", reflect.TypeOf((*MockUserUsecase)(nil).GetUserReviews), arg0)
}

// Login mocks base method.
func (m *MockUserUsecase) Login(arg0 domain.UserBasic) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUsecaseMockRecorder) Login(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), arg0)
}

// Register mocks base method.
func (m *MockUserUsecase) Register(arg0 domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserUsecaseMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUsecase)(nil).Register), arg0)
}

// UpdateAvatar mocks base method.
func (m *MockUserUsecase) UpdateAvatar(arg0 uint64, arg1 string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockUserUsecaseMockRecorder) UpdateAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserUsecase)(nil).UpdateAvatar), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserUsecase) UpdateUser(arg0 uint64, arg1 domain.UpdUser) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUsecaseMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUsecase)(nil).UpdateUser), arg0, arg1)
}

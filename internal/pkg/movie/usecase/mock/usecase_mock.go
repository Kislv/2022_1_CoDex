// Code generated by MockGen. DO NOT EDIT.
// Source: codex/internal/pkg/domain (interfaces: MovieUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	domain "codex/internal/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMovieUsecase is a mock of MovieUsecase interface.
type MockMovieUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMovieUsecaseMockRecorder
}

// MockMovieUsecaseMockRecorder is the mock recorder for MockMovieUsecase.
type MockMovieUsecaseMockRecorder struct {
	mock *MockMovieUsecase
}

// NewMockMovieUsecase creates a new mock instance.
func NewMockMovieUsecase(ctrl *gomock.Controller) *MockMovieUsecase {
	mock := &MockMovieUsecase{ctrl: ctrl}
	mock.recorder = &MockMovieUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieUsecase) EXPECT() *MockMovieUsecaseMockRecorder {
	return m.recorder
}

// GetComments mocks base method.
func (m *MockMovieUsecase) GetComments(arg0 uint64) ([]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", arg0)
	ret0, _ := ret[0].([]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockMovieUsecaseMockRecorder) GetComments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockMovieUsecase)(nil).GetComments), arg0)
}

// GetMovie mocks base method.
func (m *MockMovieUsecase) GetMovie(arg0 uint64) (domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", arg0)
	ret0, _ := ret[0].(domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieUsecaseMockRecorder) GetMovie(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieUsecase)(nil).GetMovie), arg0)
}

// GetRelated mocks base method.
func (m *MockMovieUsecase) GetRelated(arg0 uint64) ([]domain.MovieSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelated", arg0)
	ret0, _ := ret[0].([]domain.MovieSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelated indicates an expected call of GetRelated.
func (mr *MockMovieUsecaseMockRecorder) GetRelated(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelated", reflect.TypeOf((*MockMovieUsecase)(nil).GetRelated), arg0)
}

// GetReviewRating mocks base method.
func (m *MockMovieUsecase) GetReviewRating(arg0, arg1 uint64) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewRating", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReviewRating indicates an expected call of GetReviewRating.
func (mr *MockMovieUsecaseMockRecorder) GetReviewRating(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewRating", reflect.TypeOf((*MockMovieUsecase)(nil).GetReviewRating), arg0, arg1)
}

// PostComment mocks base method.
func (m *MockMovieUsecase) PostComment(arg0, arg1 uint64, arg2 string, arg3 int) (domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostComment indicates an expected call of PostComment.
func (mr *MockMovieUsecaseMockRecorder) PostComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComment", reflect.TypeOf((*MockMovieUsecase)(nil).PostComment), arg0, arg1, arg2, arg3)
}

// PostRating mocks base method.
func (m *MockMovieUsecase) PostRating(arg0, arg1 uint64, arg2 int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRating", arg0, arg1, arg2)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRating indicates an expected call of PostRating.
func (mr *MockMovieUsecaseMockRecorder) PostRating(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRating", reflect.TypeOf((*MockMovieUsecase)(nil).PostRating), arg0, arg1, arg2)
}
